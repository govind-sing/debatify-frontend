{"ast":null,"code":"// // src/components/Chat.js\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { motion } from \"framer-motion\";\n// import API from \"../api/axiosInstance\";\n// import { ChatIcon } from \"@heroicons/react/outline\";\n\n// const Chat = () => {\n//   const { username } = useParams(); // Now using username from URL\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [targetUserId, setTargetUserId] = useState(null); // Store resolved userId\n//   const navigate = useNavigate();\n//   const currentUserId = localStorage.getItem(\"userId\");\n//   const messagesEndRef = useRef(null);\n\n//   // Fetch target userId and chat history\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token || !currentUserId) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     const fetchUserIdAndChatHistory = async () => {\n//       try {\n//         setLoading(true);\n\n//         // Fetch userId from username\n//         const { data: user } = await API.get(`/users/username/${username}`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         if (!user || !user._id) throw new Error(\"User not found\");\n//         setTargetUserId(user._id);\n\n//         // Fetch chat history with resolved userId\n//         const { data: chatData } = await API.get(`/history/${user._id}`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setMessages(Array.isArray(chatData) ? chatData : []);\n\n//         // Mark messages as seen\n//         await API.put(\n//           \"/mark-seen\",\n//           { sender: user._id },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.response?.data || err.message);\n//         setError(err.message === \"User not found\" ? \"User not found\" : \"Failed to load chat\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserIdAndChatHistory();\n//   }, [username, navigate, currentUserId]);\n\n//   // Auto-scroll to latest message\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   }, [messages]);\n\n//   const handleSendMessage = async (e) => {\n//     e.preventDefault();\n//     if (!newMessage.trim() || !targetUserId) return;\n\n//     const token = localStorage.getItem(\"token\");\n//     try {\n//       const messageData = {\n//         receiver: targetUserId, // Use resolved userId\n//         text: newMessage,\n//         sender: currentUserId,\n//       };\n//       const { data } = await API.post(\"/send\", messageData, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setMessages((prev) => [...prev, data]);\n//       setNewMessage(\"\");\n//     } catch (err) {\n//       console.error(\"Error sending message:\", err.response?.data || err.message);\n//       setError(\"Failed to send message\");\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-h-screen flex justify-center items-center\">\n//         <motion.div\n//           animate={{ rotate: 360 }}\n//           transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n//           className=\"h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full\"\n//         />\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return <div className=\"p-4 text-red-500 text-center\">{error}</div>;\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 p-5 md:p-10 max-w-4xl mx-auto mt-16\">\n//       <motion.div\n//         initial={{ opacity: 0, y: 30 }}\n//         animate={{ opacity: 1, y: 0 }}\n//         transition={{ duration: 0.8, ease: \"easeOut\" }}\n//         className=\"text-center mb-8\"\n//       >\n//         <ChatIcon className=\"h-12 w-12 mx-auto text-blue-600 mb-4\" />\n//         <h1 className=\"text-4xl font-bold text-gray-800\">Chat with {username}</h1>\n//       </motion.div>\n\n//       <motion.div\n//         initial={{ opacity: 0 }}\n//         animate={{ opacity: 1 }}\n//         transition={{ duration: 0.5, delay: 0.2 }}\n//         className=\"bg-white rounded-lg shadow-lg p-4 max-h-[60vh] overflow-y-auto\"\n//       >\n//         {messages.length === 0 ? (\n//           <p className=\"text-gray-500 text-center\">No messages yet. Start chatting!</p>\n//         ) : (\n//           messages.map((msg, index) => (\n//             <motion.div\n//               key={msg._id}\n//               initial={{ opacity: 0, y: 20 }}\n//               animate={{ opacity: 1, y: 0 }}\n//               transition={{ duration: 0.5, delay: index * 0.05 }}\n//               className={`mb-4 flex ${\n//                 msg.sender._id === currentUserId ? \"justify-end\" : \"justify-start\"\n//               }`}\n//             >\n//               <div\n//                 className={`max-w-xs p-3 rounded-lg ${\n//                   msg.sender._id === currentUserId\n//                     ? \"bg-blue-500 text-white\"\n//                     : \"bg-gray-200 text-black\"\n//                 }`}\n//               >\n//                 <p className=\"font-semibold\">{msg.sender.username}</p>\n//                 {msg.text && <p>{msg.text}</p>}\n//                 {msg.image && (\n//                   <img\n//                     src={msg.image}\n//                     alt=\"Chat attachment\"\n//                     className=\"max-w-full h-auto mt-2 rounded\"\n//                   />\n//                 )}\n//                 <p className=\"text-xs mt-1 opacity-75\">\n//                   {new Date(msg.timestamp).toLocaleString()}\n//                 </p>\n//               </div>\n//             </motion.div>\n//           ))\n//         )}\n//         <div ref={messagesEndRef} />\n//       </motion.div>\n\n//       <motion.form\n//         onSubmit={handleSendMessage}\n//         initial={{ opacity: 0, y: 20 }}\n//         animate={{ opacity: 1, y: 0 }}\n//         transition={{ duration: 0.5, delay: 0.4 }}\n//         className=\"mt-4 flex space-x-2\"\n//       >\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300\"\n//         />\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-all duration-300\"\n//         >\n//           Send\n//         </button>\n//       </motion.form>\n//     </div>\n//   );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["/Users/govindsinghtanwar/coding/Projects/debatify/frontend/src/components/Chat.js"],"sourcesContent":["// // src/components/Chat.js\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import { motion } from \"framer-motion\";\n// import API from \"../api/axiosInstance\";\n// import { ChatIcon } from \"@heroicons/react/outline\";\n\n// const Chat = () => {\n//   const { username } = useParams(); // Now using username from URL\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [targetUserId, setTargetUserId] = useState(null); // Store resolved userId\n//   const navigate = useNavigate();\n//   const currentUserId = localStorage.getItem(\"userId\");\n//   const messagesEndRef = useRef(null);\n\n//   // Fetch target userId and chat history\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n//     if (!token || !currentUserId) {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     const fetchUserIdAndChatHistory = async () => {\n//       try {\n//         setLoading(true);\n\n//         // Fetch userId from username\n//         const { data: user } = await API.get(`/users/username/${username}`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         if (!user || !user._id) throw new Error(\"User not found\");\n//         setTargetUserId(user._id);\n\n//         // Fetch chat history with resolved userId\n//         const { data: chatData } = await API.get(`/history/${user._id}`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         setMessages(Array.isArray(chatData) ? chatData : []);\n\n//         // Mark messages as seen\n//         await API.put(\n//           \"/mark-seen\",\n//           { sender: user._id },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n//       } catch (err) {\n//         console.error(\"Error fetching data:\", err.response?.data || err.message);\n//         setError(err.message === \"User not found\" ? \"User not found\" : \"Failed to load chat\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchUserIdAndChatHistory();\n//   }, [username, navigate, currentUserId]);\n\n//   // Auto-scroll to latest message\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   }, [messages]);\n\n//   const handleSendMessage = async (e) => {\n//     e.preventDefault();\n//     if (!newMessage.trim() || !targetUserId) return;\n\n//     const token = localStorage.getItem(\"token\");\n//     try {\n//       const messageData = {\n//         receiver: targetUserId, // Use resolved userId\n//         text: newMessage,\n//         sender: currentUserId,\n//       };\n//       const { data } = await API.post(\"/send\", messageData, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       });\n//       setMessages((prev) => [...prev, data]);\n//       setNewMessage(\"\");\n//     } catch (err) {\n//       console.error(\"Error sending message:\", err.response?.data || err.message);\n//       setError(\"Failed to send message\");\n//     }\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-h-screen flex justify-center items-center\">\n//         <motion.div\n//           animate={{ rotate: 360 }}\n//           transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n//           className=\"h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full\"\n//         />\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return <div className=\"p-4 text-red-500 text-center\">{error}</div>;\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 p-5 md:p-10 max-w-4xl mx-auto mt-16\">\n//       <motion.div\n//         initial={{ opacity: 0, y: 30 }}\n//         animate={{ opacity: 1, y: 0 }}\n//         transition={{ duration: 0.8, ease: \"easeOut\" }}\n//         className=\"text-center mb-8\"\n//       >\n//         <ChatIcon className=\"h-12 w-12 mx-auto text-blue-600 mb-4\" />\n//         <h1 className=\"text-4xl font-bold text-gray-800\">Chat with {username}</h1>\n//       </motion.div>\n\n//       <motion.div\n//         initial={{ opacity: 0 }}\n//         animate={{ opacity: 1 }}\n//         transition={{ duration: 0.5, delay: 0.2 }}\n//         className=\"bg-white rounded-lg shadow-lg p-4 max-h-[60vh] overflow-y-auto\"\n//       >\n//         {messages.length === 0 ? (\n//           <p className=\"text-gray-500 text-center\">No messages yet. Start chatting!</p>\n//         ) : (\n//           messages.map((msg, index) => (\n//             <motion.div\n//               key={msg._id}\n//               initial={{ opacity: 0, y: 20 }}\n//               animate={{ opacity: 1, y: 0 }}\n//               transition={{ duration: 0.5, delay: index * 0.05 }}\n//               className={`mb-4 flex ${\n//                 msg.sender._id === currentUserId ? \"justify-end\" : \"justify-start\"\n//               }`}\n//             >\n//               <div\n//                 className={`max-w-xs p-3 rounded-lg ${\n//                   msg.sender._id === currentUserId\n//                     ? \"bg-blue-500 text-white\"\n//                     : \"bg-gray-200 text-black\"\n//                 }`}\n//               >\n//                 <p className=\"font-semibold\">{msg.sender.username}</p>\n//                 {msg.text && <p>{msg.text}</p>}\n//                 {msg.image && (\n//                   <img\n//                     src={msg.image}\n//                     alt=\"Chat attachment\"\n//                     className=\"max-w-full h-auto mt-2 rounded\"\n//                   />\n//                 )}\n//                 <p className=\"text-xs mt-1 opacity-75\">\n//                   {new Date(msg.timestamp).toLocaleString()}\n//                 </p>\n//               </div>\n//             </motion.div>\n//           ))\n//         )}\n//         <div ref={messagesEndRef} />\n//       </motion.div>\n\n//       <motion.form\n//         onSubmit={handleSendMessage}\n//         initial={{ opacity: 0, y: 20 }}\n//         animate={{ opacity: 1, y: 0 }}\n//         transition={{ duration: 0.5, delay: 0.4 }}\n//         className=\"mt-4 flex space-x-2\"\n//       >\n//         <input\n//           type=\"text\"\n//           value={newMessage}\n//           onChange={(e) => setNewMessage(e.target.value)}\n//           placeholder=\"Type a message...\"\n//           className=\"flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300\"\n//         />\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-all duration-300\"\n//         >\n//           Send\n//         </button>\n//       </motion.form>\n//     </div>\n//   );\n// };\n\n// export default Chat;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}