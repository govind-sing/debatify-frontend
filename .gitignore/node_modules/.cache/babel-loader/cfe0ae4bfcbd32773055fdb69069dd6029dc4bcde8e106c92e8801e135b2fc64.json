{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { NavLink, Link, useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { HomeIcon, ChatAlt2Icon, PencilIcon, UserIcon, SearchIcon, BellIcon } from \"@heroicons/react/outline\";\nimport API from \"../api/axiosInstance\";\nconst Navbar = () => {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const searchRef = useRef(null);\n  const notificationRef = useRef(null);\n  const navbarRef = useRef(null);\n  const lastNotificationIdRef = useRef(null);\n  const formatNotificationMessage = useCallback(notif => {\n    var _notif$user, _notif$target, _notif$target2, _notif$comment;\n    const actor = ((_notif$user = notif.user) === null || _notif$user === void 0 ? void 0 : _notif$user.username) || \"Someone\";\n    const targetTitle = ((_notif$target = notif.target) === null || _notif$target === void 0 ? void 0 : _notif$target.title) || \"Untitled\";\n    const targetType = ((_notif$target2 = notif.target) === null || _notif$target2 === void 0 ? void 0 : _notif$target2.type) || \"post\";\n    switch (notif.type) {\n      case \"follow\":\n        return `${actor} followed you`;\n      case \"unfollow\":\n        return `${actor} unfollowed you`;\n      case \"upvote\":\n        return `${actor} upvoted your ${targetType} \"${targetTitle}\"`;\n      case \"downvote\":\n        return `${actor} downvoted your ${targetType} \"${targetTitle}\"`;\n      case \"comment\":\n        return `${actor} commented \"${((_notif$comment = notif.comment) === null || _notif$comment === void 0 ? void 0 : _notif$comment.text) || \"something\"}\" on your ${targetType} \"${targetTitle}\"`;\n      case \"comment_like\":\n        return `${actor} liked your comment at ${targetType} \"${targetTitle}\"`;\n      default:\n        return notif.message || \"New notification\";\n    }\n  }, []);\n  const fetchNotifications = useCallback(async () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    try {\n      var _formattedNotificatio;\n      const res = await API.get(\"/notifications\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const formattedNotifications = res.data.map(notif => ({\n        ...notif,\n        message: formatNotificationMessage(notif)\n      }));\n      formattedNotifications.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      const latestId = (_formattedNotificatio = formattedNotifications[0]) === null || _formattedNotificatio === void 0 ? void 0 : _formattedNotificatio._id;\n      if (lastNotificationIdRef.current !== latestId) {\n        setNotifications(formattedNotifications);\n        setUnreadCount(formattedNotifications.filter(n => !n.read).length);\n        lastNotificationIdRef.current = latestId;\n      }\n    } catch (err) {\n      console.error(\"Error fetching notifications:\", err);\n    }\n  }, [formatNotificationMessage]);\n  const fetchUserProfile = useCallback(async () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      try {\n        const res = await API.get(\"/users/profile/me\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setUsername(res.data.username);\n        fetchNotifications();\n      } catch (err) {\n        console.error(\"Error fetching user profile:\", err);\n        setUsername(\"\");\n        setNotifications([]);\n        setUnreadCount(0);\n      }\n    } else {\n      setUsername(\"\");\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, [fetchNotifications]);\n  useEffect(() => {\n    fetchUserProfile();\n    const handleStorageChange = e => {\n      if (e.key === \"token\" && e.newValue && !e.oldValue) {\n        fetchUserProfile(); // Reload on new login/signup\n      }\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    const pollingId = setInterval(fetchNotifications, 5000);\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n      clearInterval(pollingId);\n    };\n  }, [fetchUserProfile, fetchNotifications]); // Fixed by adding fetchNotifications\n\n  // Rest of your code remains unchanged...\n  // [Insert the rest of the Navbar component here]\n};\n\n// [Insert the rest of the JSX and export statement here]\n_s(Navbar, \"VDR0w6XWEMuuHbWw1inVCxWJNyc=\", false, function () {\n  return [useNavigate];\n});\n_c = Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","NavLink","Link","useNavigate","motion","HomeIcon","ChatAlt2Icon","PencilIcon","UserIcon","SearchIcon","BellIcon","API","Navbar","_s","navigate","username","setUsername","searchQuery","setSearchQuery","searchResults","setSearchResults","isSearchOpen","setIsSearchOpen","notifications","setNotifications","isNotificationOpen","setIsNotificationOpen","unreadCount","setUnreadCount","searchRef","notificationRef","navbarRef","lastNotificationIdRef","formatNotificationMessage","notif","_notif$user","_notif$target","_notif$target2","_notif$comment","actor","user","targetTitle","target","title","targetType","type","comment","text","message","fetchNotifications","token","localStorage","getItem","_formattedNotificatio","res","get","headers","Authorization","formattedNotifications","data","map","sort","a","b","Date","createdAt","latestId","_id","current","filter","n","read","length","err","console","error","fetchUserProfile","handleStorageChange","e","key","newValue","oldValue","window","addEventListener","pollingId","setInterval","removeEventListener","clearInterval","_c","$RefreshReg$"],"sources":["/Users/govindsinghtanwar/coding/Projects/debatify/frontend/src/components/Navbar.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport { NavLink, Link, useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport {\n  HomeIcon,\n  ChatAlt2Icon,\n  PencilIcon,\n  UserIcon,\n  SearchIcon,\n  BellIcon,\n} from \"@heroicons/react/outline\";\nimport API from \"../api/axiosInstance\";\n\nconst Navbar = () => {\n  const navigate = useNavigate();\n  const [username, setUsername] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [isNotificationOpen, setIsNotificationOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const searchRef = useRef(null);\n  const notificationRef = useRef(null);\n  const navbarRef = useRef(null);\n  const lastNotificationIdRef = useRef(null);\n\n  const formatNotificationMessage = useCallback((notif) => {\n    const actor = notif.user?.username || \"Someone\";\n    const targetTitle = notif.target?.title || \"Untitled\";\n    const targetType = notif.target?.type || \"post\";\n\n    switch (notif.type) {\n      case \"follow\": return `${actor} followed you`;\n      case \"unfollow\": return `${actor} unfollowed you`;\n      case \"upvote\": return `${actor} upvoted your ${targetType} \"${targetTitle}\"`;\n      case \"downvote\": return `${actor} downvoted your ${targetType} \"${targetTitle}\"`;\n      case \"comment\": return `${actor} commented \"${notif.comment?.text || \"something\"}\" on your ${targetType} \"${targetTitle}\"`;\n      case \"comment_like\": return `${actor} liked your comment at ${targetType} \"${targetTitle}\"`;\n      default: return notif.message || \"New notification\";\n    }\n  }, []);\n\n  const fetchNotifications = useCallback(async () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    try {\n      const res = await API.get(\"/notifications\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      const formattedNotifications = res.data.map((notif) => ({\n        ...notif,\n        message: formatNotificationMessage(notif),\n      }));\n\n      formattedNotifications.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      const latestId = formattedNotifications[0]?._id;\n      if (lastNotificationIdRef.current !== latestId) {\n        setNotifications(formattedNotifications);\n        setUnreadCount(formattedNotifications.filter((n) => !n.read).length);\n        lastNotificationIdRef.current = latestId;\n      }\n    } catch (err) {\n      console.error(\"Error fetching notifications:\", err);\n    }\n  }, [formatNotificationMessage]);\n\n  const fetchUserProfile = useCallback(async () => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      try {\n        const res = await API.get(\"/users/profile/me\", {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setUsername(res.data.username);\n        fetchNotifications();\n      } catch (err) {\n        console.error(\"Error fetching user profile:\", err);\n        setUsername(\"\");\n        setNotifications([]);\n        setUnreadCount(0);\n      }\n    } else {\n      setUsername(\"\");\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  }, [fetchNotifications]);\n\n  useEffect(() => {\n    fetchUserProfile();\n\n    const handleStorageChange = (e) => {\n      if (e.key === \"token\" && e.newValue && !e.oldValue) {\n        fetchUserProfile(); // Reload on new login/signup\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    const pollingId = setInterval(fetchNotifications, 5000);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n      clearInterval(pollingId);\n    };\n  }, [fetchUserProfile, fetchNotifications]); // Fixed by adding fetchNotifications\n\n  // Rest of your code remains unchanged...\n  // [Insert the rest of the Navbar component here]\n};\n\n// [Insert the rest of the JSX and export statement here]"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}